import { Actor, HttpAgent } from "@dfinity/agent"

// This is a placeholder for your backend's Candid IDL.
// In a real DFINITY project, this would typically be generated by `dfx generate backend`.
// The IDL provided in the user's prompt is used here.
export const idlFactory = ({ IDL }) => {
  const Note = IDL.Record({
    title: IDL.Text,
    content: IDL.Text,
  })
  const Result = IDL.Variant({ Ok: IDL.Text, Err: IDL.Text })
  return IDL.Service({
    add_note: IDL.Func([Note], [IDL.Opt(Note)], []), // Modified to take only Note, ID generated internally
    get_note: IDL.Func([IDL.Nat64], [IDL.Opt(Note)], ["query"]),
    list_notes: IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Nat64, Note))], ["query"]),
    delete_note: IDL.Func([IDL.Nat64], [Result], []), // Changed to use Result type
    update_note: IDL.Func([IDL.Nat64, Note], [IDL.Opt(Note)], []), // Added update_note
    search_notes: IDL.Func([IDL.Text], [IDL.Vec(IDL.Tuple(IDL.Nat64, Note))], ["query"]), // Added search_notes
  })
}

export const createActor = (canisterId, idl, options) => {
  const agent = new HttpAgent({ ...options?.agentOptions })

  // Fetch root key for local development
  if (process.env.DFX_NETWORK !== "ic") {
    agent.fetchRootKey().catch((err) => {
      console.warn("Unable to fetch root key. Check to ensure that your local replica is running")
      console.error(err)
    })
  }

  // Creates an actor with the given canister ID and IDL
  return Actor.createActor(idl, {
    agent,
    canisterId,
    ...options?.actorOptions,
  })
}
